---
title: "Development Environment Testing"
author: "Laurie Platt"
date: last-modified
date-format: "[Last updated ] DD MMMM, YYYY"
format:
  html:
    embed-resources: true
    code-tools: true
    code-fold: show
    toc: true
    toc-location: left
    toc-depth: 4
    toc-expand: 1
    number-sections: true
    fig-cap-location: top
    code-links:
      - text: github.com/scc-pi/test-dev-env
        icon: github
        href: https://github.com/scc-pi/test-dev-env
execute:
#   freeze: true
  warning: false
  message: false
---

## Introduction 

The purpose of this repo is to help with testing of development environments e.g. using Python for data analysis.  

We'll first test the components individually, before testing how the components integrate within an IDE.  

## PATH

The PATH environment variable specifies the set of directories used to search for executable (.exe) files.  

::: {.column-margin}
**Resource:**  
[path command (MS Learn)](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/path)
:::  

It's worth noting the PATH of the vanilla AVD prior to ADMIN installation of Python, Git, etc. 

Note the PATH again before any end user configuration or installation.

> To get the PATH, open a terminal, type `echo %PATH%`, and press enter.

![](resources/path-echo.png){width=400}  

PATH is a combination of system and user PATH environment variables. We can see and edit the **user** (not system) PATH via *Edit environment variables for your account*:  

![](resources/env-vars.png){width=250}

![](resources/path-env-var.png){width=400}

![](resources/edit-path.png){width=350}

## Python

Python is installed by IT.  

### Python installation

> To test whether Python is installed, open a terminal, type `python --version`, and press enter.

::: {.column-margin}
**Resource:**  
[Using the `python` command (Real Python)](https://realpython.com/run-python-scripts/#using-the-python-command)
:::  

![](resources/python-version.png){width=300}  

> To find where Python interpretter (python.exe) is installed, open a terminal, type `where python`, and press enter.

![](resources/python-where.png){width=400} 

### Multiple Python versions  

*TODO: not a priority for the Windows 11 deadline.*

### Python Launcher

On Windows, the `py` command can be used in place of `python`. 

::: {.column-margin}
**Resource:**  
[Python Launcher for Windows (Python documentation)](https://docs.python.org/3/using/windows.html#python-launcher-for-windows)
:::  

When there are multiple versions of Python installed, using the `python` command is more ambiguous on Windows than other operating systems. Typing `python` may run whichever version was added to PATH last â€” which can get confusing.  

The `py` command uses the Python Launcher for Windows, which is a utility that helps locate and execute different Python versions. Python Launcher is included in the base Python Windows installation along with the Python interpretter.

> To see where the Python Launcher is installed, open a terminal, type `where py`, and press enter.

![](resources/py-where.png){width=350} 

## Python packages

Python packages are installed and managed by the user.

### pip

[Pip](https://packaging.python.org/en/latest/key_projects/#pip) is the most popular tool for installing Python packages and is included in the base Python installation along with the Python interpretter.  

::: {.column-margin}
**Resource:**  
[Installing Python packages (Python Packaging User Guide)](https://packaging.python.org/en/latest/tutorials/installing-packages/)
:::

> To test whether pip is available, open a terminal, type `py -m pip --version`, and press enter.

![](resources/pip-version.png){width=550}

> To see where pip is installed, open a terminal, type `where pip`, and press enter.

![](resources/pip-where.png){width=300}

### Python package installation  

> To test whether we can install a Python package (e.g. pandas), open a terminal, type `py -m pip install pandas`, and press enter.  

![](resources/pip-install-pandas.png){width=550}  

### Python package location  

Python packages can be stored at three different levels:  

::: {.column-margin}
**Resource:**  
[How to find python library path (edureka)](https://www.edureka.co/community/101278/how-do-find-the-location-of-my-python-site-packages-directory)
:::

1. global  
1. user  
1. project  

Project level is known as a "virtual environment" and is best practice. It is covered under the venv heading below.

> To see where Python packages are installed at the **global** level, open a terminal, type `py -c "import site; print(site.getsitepackages())"`, and press enter.  

![](resources/packages-global.png){width=550}  

> To see where Python packages are installed at the **user** level, open a terminal, type `py -m site --user-site`, and press enter.  

![](resources/packages-user.png){width=500}  

When we installed the pandas Python package in the preceding section, the resulting message included "Defaulting to user installation because normal site-package is not writeable".   

> To see where the pandas Python package is installed, open a terminal, type `pip show pandas`, and press enter.  

![](resources/pandas-show1.png){width=500}  
...  
![](resources/pandas-show2.png){width=500}  

## Python projects

Python projects are managed by the user. The simplest way to manage a Python project is for it to be contained within its own directory, i.e. one project = one folder. Albeit that one main project folder may have sub-folders.   

### Project location

Where an AVD, such as the Data Science AVD, is shared by several users, projects (repos) should be saved somewhere under the user profile: `%USERPROFILE%`. For example, `C:\Users\lp41455\repo`. If users are collaborating on the same repo this will be explicit about which copy of a repo belong to who. Additionally, a user can be confident no one else has changed a script in their repo, or read a confidential data file.

### venv

[venv](https://docs.python.org/3/library/venv.html) is a Python module included in the base Python installation.

::: {.column-margin}
**Resource:**  
[Python Virtual Environments (Real Python)](https://realpython.com/python-virtual-environments-a-primer/)
:::

> To test creating a virtual environment using venv, open a terminal, navigate to a project folder (e.g. enter `cd repo\test-venv`), type `py -m venv .venv\`, and press enter.  

![](resources/venv-create.png){width=350}  


## Positron  

### Positron installation  

Positron is installed by IT.

*TODO*

### Positron extensions

Positron extensions are installed and managed by the user.

*TODO*

## Quarto  

Quarto is included in the Positron install.  

> To test the Quarto installation, open a terminal, type `quarto check`, and press enter.

![](resources/quarto-check.jpg)  

### Path 

*TODO*

### Jupyter

*TODO*


## Git

### Git installation

Git is installed by IT.  

::: {.column-margin}
**Resource:**  
[Setting up Git (NHS Service Manual)](https://prototype-kit.service-manual.nhs.uk/how-tos/git)
:::  

> To test whether Git is installed, open a terminal, type `git --version`, and press enter.

![](resources/git-version.png){width=350}  

### Git config  

Git is configured by the user.

To configure your Git name and email address, from a terminal run:

`git config --global user.email "Firstname.Lastname@sheffield.gov.uk"`  
`git config --global user.name "Firstname Lastname"`

To confirm the changes run:

`git config --list`

![](resources/git-config.png){width=450}  

### Git initialise

> To test initialising Git, open a terminal, navigate to a project folder (e.g. enter `cd repo\test-git`), type `git init`, and press enter.  

![](resources/git-init.png){width=450}  

### Git status

> To check the git status open a terminal, navigate to the repo folder (e.g. enter `cd repo\test-git`), type `git status`, and press enter.  

![](resources/git-status1.png){width=400}  

### Git commit

To test a Git commit:

1. Add a test file (e.g. `test-commit.txt`) to the previously test report (e.g. `\repo\test-git`). Check git status.  

![](resources/git-status2.png){width=450}  

2. "Stage" the changes by running `git add .` from a terminal. Check git status.     

![](resources/git-status3.png){width=300}  

3. "Commit" the staged changes by running `git commit -m "First commit"` from a terminal. Check git status.    

![](resources/git-status3.png){width=300}    


### Git clone  

> To test cloning a Git repo, open a terminal, navigate to where you want the repo created (e.g. enter `cd repo`), type `git clone https://github.com/scc-pi/test-dev-env.git`, and press enter.  

::: {.column-margin}
**Resource:**  
[Cloning a repository (GitHub)](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)
:::  

![](resources/git-clone.png){width=450}  

## Positron workflow

### Clone repo

> Copy the HTTPS web URL for the [github.com/scc-pi/test-dev-env](https://github.com/scc-pi/test-dev-env) repo.

::: {.column-margin}
**Testing:**    

1. Positron  
1. Git
:::

![](resources/repo-web-url.jpg)  

https://github.com/scc-pi/test-dev-env.git

> Open Positron.

> Create a new folder from Git (*File* > *New Folder from Git...*):

![](resources/new-folder-git.jpg)  

> Paste the web URL for the repo:  

![](resources/paste-repo-url.jpg)  

> In the Explorer pane you should see a few files from the repo:  

![](resources/explorer-few-files.jpg)

### Create virtual environment

> To create a new virtual environment, from the Command Palette (*Ctrl* + *Shift* + *P*) start typing "Python: Create Environment" and select *Python: Create Environment...*: 

::: {.column-margin}
**Testing:**    

1. Positron  
1. Python  
1. Venv  
1. Python package installation
:::

![](resources/cmd-palette-create-env.jpg)  

> Select *venv* as the environment type:  

![](resources/venv-select.jpg)  

> Select a Python interpreter:  

![](resources/python-interpreter-select.jpg)  

> Select the dependencies (Python packages) to install by checking `requirements.txt` file tick box:  

![](resources/requirements-select.jpg)

> Wait while the environment is created:  

![](resources/creating-env.jpg)

> Once it's done you should get a notification and you should also see that *venv* is mentioned in the current interpreter selection:  

![](resources/env-created.jpg)  

![](resources/selected-interpreter-venv.jpg)

### Render Quarto document

> Open `test-page.qmd`:  

::: {.column-margin}
**Testing:**    

1. Positron  
1. Python  
1. Python packages  
1. Quarto  
:::

![](resources/qmd-open.jpg)  

> From the Command Palette select *Quarto: Render Document*:  

![](resources/qmd-render.jpg)

> Select *Render HTML*:  

![](resources/render-html.jpg)

> The terminal pane will detail progress:  

![](resources/terminal-output.jpg)

> The Positron default is for the HTML output to be shown in a preview pane. Alternatively, you can check the output by opening the `test_page.html` in your browser.    

## VS Code workflow

*TODO*